name: Deploy Django App

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Run flake8
        run: flake8

  test:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Run tests with coverage
        env:
          DEBUG: True
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          coverage run --source='.' manage.py test
          coverage report -m
          coverage xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Deploy to Server
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Pull the latest image
            docker pull $DOCKER_HUB_USERNAME/django-app:$GITHUB_SHA
            
            # Stop and remove old container
            docker stop django-app || true
            docker rm django-app || true
            
            # Run new container with environment variables
            docker run -d \
              --name django-app \
              -p 80:8000 \
              -e DEBUG=False \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e DB_NAME="${{ secrets.DB_NAME }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e CELERY_BROKER_URL="${{ secrets.CELERY_BROKER_URL }}" \
              -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
              -e STRIPE_PUBLIC_KEY="${{ secrets.STRIPE_PUBLIC_KEY }}" \
              $DOCKER_HUB_USERNAME/django-app:$GITHUB_SHA
            
            # Run migrations
            docker exec django-app python manage.py migrate
            docker exec django-app python manage.py collectstatic --noinput
            
            echo "ðŸš€ Deployment completed successfully!"
          EOF